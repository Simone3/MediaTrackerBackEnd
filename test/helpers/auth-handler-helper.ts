import * as admin from 'firebase-admin';
import sinon from 'sinon';

/**
 * Helper to setup the Firebase mock
 */
export const setupTestAuth = (): void => {

	// Build a fake auth object (at the moment just verifyIdToken() method)
	const fakeAuth: admin.auth.Auth = {
		verifyIdToken: (tokenId: string) => {
			return new Promise((resolve, reject): void => {
				
				// Valid mocked tokens generated by buildFakeAuthToken() are just stringifyed JSONs
				if(!tokenId) {
					
					reject('[Firebase mock] Empty mocked token');
				}
				else {

					const parsedToken = JSON.parse(tokenId);
					if(!parsedToken.uid) {

						reject('[Firebase mock] Invalid mocked token');
					}
					else {

						resolve(parsedToken);
					}
				}
			});
		}
	} as unknown as admin.auth.Auth;
	
	const fakeAuthGetter = sinon.fake.returns(() => {
		return fakeAuth;
	});
	sinon.replaceGetter(admin, 'auth', fakeAuthGetter);
};

/**
 * Helper to build a fake auth token for the given user
 * @param userId the user
 * @returns the fake auth token
 */
export const buildFakeAuthToken = (userId: string): string => {
	
	const fakeToken: admin.auth.DecodedIdToken = {
		aud: 'test-firebase-app',
		auth_time: 1577091960,
		email: `${userId}@test.test`,
		email_verified: false,
		exp: 1577095560,
		firebase: {
			identities: {
				email: `${userId}@test.test`
			},
			sign_in_provider: 'password'
		},
		iat: 1577091960,
		iss: 'https://securetoken.google.com/test-firebase-app',
		sub: userId,
		uid: userId,
		user_id: userId
	};
	return JSON.stringify(fakeToken);
};

